ISC License

Copyright (c) 2004-2010 by Internet Systems Consortium, Inc. ("ISC") 
Copyright (c) 1995-2003 by Internet Software Consortium

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

// if(require == module){ console.log(comprar si es el primer modulo, solo el primer modulo dara true los demas no)}
/* let checkStatus = (linksArray) => {
    let arrayLinksLength = linksArray.length;
    const options = {};
    console.log(options);
    if (validate === undefined) {
      options.validate = false;
    } else if (validate.indexOf('--validate') !== -1) {
      options.validate = true;
    }
    if (stats === undefined) {
      options.stats = false;
    } else if (stats.indexOf('--stats') !== -1) {
      options.stats = true;
    }
    let unique = 0;
    let broken = 0;
    let total = linksArray.length;
  
    linksArray.forEach(link => {
      fetch(link.href).then(response => {
          arrayLinksLength--;
          let result = '';
          link.status = response.status;
          if (options.validate) {
            if (link.status === 200) {
              result = `Nombre: ${link.text} :  ${link.href} // Status: ${(link.status)} ${(.success)}`;
            } else {
              result = `Nombre: ${link.text} : ${link.href} // Status: ${(link.status)} ${(.error)}`;
            }
          } else {
            result = `Nombre: ${link.text} :  ${link.href}`;
          }
          if (options.stats) {
            if (link.status === 200) {
              unique++;
            } else {
              broken++;
            }
          }
          console.log(result);
          if (options.stats) {
            if (arrayLinksLength === 0) {
              console.log(`${('STATS: Unique ->')} ${(unique)} \n ${('Broken ->')} ${(broken)}`);
            }
          }
        }).catch(error => {
          console.log(error);
        });
    });
  };
//  checkStatus(links, pathUrl);
  */